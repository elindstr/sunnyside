<h1>[admin/homepage.handlebars:] Admin Homepage</h1>
<h2>Welcome {{userData.first_name}}</h2>

<a href="admin/customers">customer manager</a><br>
<a href="admin/products">product manager</a><br>
<a href="admin/employees">employee manager</a><br>
<a href="admin/invoices">invoice manager</a>

<p>(render links to admin tools in an aside)</p>
<pre>
EL ideas:
 -basic employee login tools, plus admin editing privilege:
        -view/log/edit cleaning service notes
        -view/log/edit expense notes
        -view/log/edit customer_interaction notes

    -manage products (by default, there are 2 products, but
     this page allows the admin to add more, or edit these prices): 
        (1) chlorine/ph testing and management - $75 / month
        (2) full-service - $150 / month

    -manage customers
        -create new customer
        -lookup current customer
            -edit customer
            -link to customer_interactions page 
            -link to service history page 
            -link to invoice/payment history page

    -manage employees
        -new employee
        -edit employee

    -manage service schedule
        -some way to visually pair customers 
        (customers.cleaning_schedule & customers.assigned_employee) 
        with employees (employees.available_days)

    -manage invoicing/payments
        -batch generate all monthly invoices (with auto email 
        using nodemailer (new package)) --- (this method queries 
        for each customer, pulls all uninvoiced services expenses, 
        generates the body of an invoice as an html page, and then 
        emails a notice to the customer. The html page is saved 
        as a string in our database.)
        -generate off-cycle individual invoice
        -log payments

    -view data (sortable / filterable / editable data):
        -customer_interactions
        -service history
        -invoice/payment history
        
        (These are tables with query returns based on 
        user filtering and sorting inputs. The client-side 
        table data is dynamically generated with event 
        listeners that listen for double-clicking on the 
        element, which opens up the data for editing/deleting.)
</pre>




